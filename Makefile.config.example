## Refer to http://caffe.berkeleyvision.org/installation.html
# Contributions simplifying and improving our build system are welcome!

# cuDNN acceleration switch (uncomment to build with cuDNN).
# USE_CUDNN := 1
# MIOpen acceleration switch (uncomment to build with MIOpen).
USE_MIOPEN := 1

# CPU-only switch (uncomment to build without GPU support).
# CPU_ONLY := 1

# Use rocBLAS in place of hcBLAS
USE_ROCBLAS := 1

# Enable code common to both accelerated machine-learning libs
ifeq ($(USE_CUDNN), 1)
	USE_ACCMI:=1
endif
ifeq ($(USE_MIOPEN), 1)
	USE_ACCMI:=1
endif

# Query the underlying HIP platform
HIP_PLATFORM := $(shell hipconfig -P)
# uncomment to disable IO dependencies and corresponding data layers
# USE_OPENCV := 0
# USE_LEVELDB := 0
# USE_LMDB := 0

# uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary)
#	You should not set this flag if you will be reading LMDBs with any
#	possibility of simultaneous read and write
# ALLOW_LMDB_NOLOCK := 1

# Uncomment if you're using OpenCV 3
# OPENCV_VERSION := 3

# CUDA directory contains bin/ and lib/ directories that we need.
HIP_PATH ?= /opt/rocm/hip

# To customize your choice of compiler, uncomment and set the following.
# N.B. the default for Linux is g++ and the default for OSX is clang++
ifneq (, $(findstring hcc, $(HIP_PLATFORM)))
	CUSTOM_CXX := hipcc
	HIP_ARCH := --amdgpu-target=gfx803 --amdgpu-target=gfx900 --amdgpu-target=gfx906
else ifneq (, $(findstring nvcc, $(HIP_PLATFORM)))
	CUSTOM_CXX := g++
	# CUDA architecture setting: going with all of them.
	# For CUDA < 6.0, comment the *_50 lines for compatibility.
	HIP_ARCH := -gencode arch=compute_20,code=sm_20 \
			-gencode arch=compute_20,code=sm_21 \
			-gencode arch=compute_30,code=sm_30 \
			-gencode arch=compute_35,code=sm_35 \
			-gencode arch=compute_50,code=sm_50 \
			-gencode arch=compute_50,code=compute_50
endif

ifeq ($(USE_CUDNN), 1)
	CUDNN_PATH ?= /usr/local/cuda
endif
# On Ubuntu 14.04, if cuda tools are installed via
# "sudo apt-get install nvidia-cuda-toolkit" then use this instead:
# CUDA_DIR := /usr

ifeq ($(USE_MIOPEN), 1)
        # MIOpen exists under /opt/rocm/include and /opt/rocm/lib
        MIOPEN_PATH ?= /opt/rocm
endif

# BLAS choice:
# atlas for ATLAS (default)
# mkl for MKL
# open for OpenBlas
BLAS := atlas
# Custom (MKL/ATLAS/OpenBLAS) include and lib directories.
# Leave commented to accept the defaults for your choice of BLAS
# (which should work)!
# BLAS_INCLUDE := /path/to/your/blas
# BLAS_LIB := /path/to/your/blas

# Homebrew puts openblas in a directory that is not on the standard search path
# BLAS_INCLUDE := $(shell brew --prefix openblas)/include
# BLAS_LIB := $(shell brew --prefix openblas)/lib

# This is required only if you will compile the matlab interface.
# MATLAB directory should contain the mex binary in /bin.
# MATLAB_DIR := /usr/local
# MATLAB_DIR := /Applications/MATLAB_R2012b.app

# NOTE: this is required only if you will compile the python interface.
# We need to be able to find Python.h and numpy/arrayobject.h.
PYTHON_INCLUDE := /usr/include/python2.7 \
		/usr/lib/python2.7/dist-packages/numpy/core/include
# Anaconda Python distribution is quite popular. Include path:
# Verify anaconda location, sometimes it's in root.
# ANACONDA_HOME := $(HOME)/anaconda
# PYTHON_INCLUDE := $(ANACONDA_HOME)/include \
		# $(ANACONDA_HOME)/include/python2.7 \
		# $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \

# Uncomment to use Python 3 (default is Python 2)
# PYTHON_LIBRARIES := boost_python3 python3.5m
# PYTHON_INCLUDE := /usr/include/python3.5m \
#                 /usr/lib/python3.5/dist-packages/numpy/core/include

# We need to be able to find libpythonX.X.so or .dylib.
PYTHON_LIB := /usr/lib
# PYTHON_LIB := $(ANACONDA_HOME)/lib

# Homebrew installs numpy in a non standard path (keg only)
# PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include
# PYTHON_LIB += $(shell brew --prefix numpy)/lib

# Uncomment to support layers written in Python (will link against Python libs)
# WITH_PYTHON_LAYER := 1

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /opt/rocm/hip/include /opt/rocm/profiler/CXLActivityLogger/include /opt/rocm/hiprand/include /opt/rocm/rocrand/include /usr/include/hdf5/serial

LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /opt/rocm/hiprand/lib /opt/rocm/rocrand/lib /opt/rocm/hcfft/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial

ifeq ($(USE_ROCBLAS), 1)
     INCLUDE_DIRS += /opt/rocm/hipblas/include
     LIBRARY_DIRS += /opt/rocm/hipblas/lib
else
     INCLUDE_DIRS += /opt/rocm/hcblas/include
     LIBRARY_DIRS += /opt/rocm/hcblas/lib
endif

# If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies
# INCLUDE_DIRS += $(shell brew --prefix)/include
# LIBRARY_DIRS += $(shell brew --prefix)/lib

# Uncomment to use `pkg-config` to specify OpenCV library paths.
# (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.)
# USE_PKG_CONFIG := 1

# N.B. both build and distribute dirs are cleared on `make clean`
BUILD_DIR := build
DISTRIBUTE_DIR := distribute

# Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171
# DEBUG := 1

# The ID of the GPU that 'make runtest' will use to run unit tests.
TEST_GPUID := 0

# enable pretty build (comment to see full commands)
Q ?= @
